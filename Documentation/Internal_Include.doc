/******************************************************************************* File Name : Internal_Include.doc* Author : Laurent Fawer	(For the modification related to the .include  * 						 			directive and for this documentation).* Date : 12 February 1992.* From version : as (1.23)* Actual version with include : as (1.3)**/*************************************************************** Internal documentation related to the .include directive : ***************************************************************From version : as (1.23)Actual version with include : as (1.3)************** General : **************				The modifications have been done in a way to don't have				to deal to much with the original code, therefore :												1) It builds first an temporary appended file from the 					main file  and all the included files. An odd name					has been chosen for this temporary file to avoid any					names conflicts.									2) Send this temporary file back in the normal process					with inside the references to the original files like :					.file  " definition.s " 					.line  23 					To be able to generate some sensible error messages					with the original file name and the a correct line number.										Inside the original code, we need to be able to interpret					.file and .line correctly; .line was fine, but .file wasn't					interpreted at all (and it looked very difficult to pickup					the names from the appended file or general variables coming					from it, so I used a tricky things :											a) When creating the appended file, I build a vector 							(VectInclFileName) holding all the names following the 							.file directive.													b)	In asparse.c (p17) the instruction							case IFILE: detect all the .file directives met							inside the appended file, so at this point I							just load the global variable dotsname (used							to give the name of the problematic file) with							the corresponding values inside VectInclFileName.							Therefore the errors message have a correct file name.											3) Terminate the compiling with errors or not and delete the					old appended file.					Actuel temporary file name :										#define TheIncludeBuffer  "TempX7178X"  /* appended file */										******************************************************* Main file and procedures in relation with .include *******************************************************					* New files :				asinclude.h			/* Hold the mainpart of the include */			asinclude.c			/* modification.							*/			* Modified files :			main.c			docmds.c			asparse.c			* Main call order : 	To build the appended file :				main.c ( file-open(NameComplFile,&RefNumRet) )  	/* Menu Assemble... */			docmds.c (IntegrateTheInclude (...) )			IntegrateTheInclude(..) : Last procedure defined in asinclude.c					do the most part of the appending job to create the appended					file.						Once the appended file is built : 				docmds.c ( vax_assemble(...) )      /* Main compiling job */			asparse.c ( case IFILE: ...)   		/* To have a correct error message */									****************************			* Notes about the user doc ****************************** 	The given file names should not exceed 64 characters, it should not be a 	problem because you don't give the path (#define	SizeFileNameVI		64).					* How many .include	: 	The number of .include directive you can use is limited to 50	and you should not have more than 20 levels of imbrication.		50 come from   	(#define	IndxMaxIFN			100 )  it's only the half 	because in most of the case we need for each .include directive to write		The name of the included file to introduce it and when it come back to 	the mother level, we need to give the name of the mother file, for example 	if main.s has an .include "hello" directive in line 50 we would have :			 **************************	 * Original file main.s : *	 ...	 include "hello"	 ...		 *******************	 * Appended file : *		.file		" hello.s " 					/* Stored in VectInclFileName */	.line		0 	/* Start hello file */	...	...	Include file as long you want with	some .include inside if you want too.	...	...		/* End hello file */	.file 	" main.s "						/* Also stored in VectInclFileName */	.line		50				Therefore we have 2 .file  directive for each  .include, except if the 	.include  is at the end of the mother file, so in the worst of the case	 we would have IndxMaxIFN/2 = 50 possible .include.			20 come from : #define LimStackIncl  20  	/* 0 to 20, so in reality 21 levels! */	