#ifndef ASSCAN_H#define ASSCAN_H/* *	The character scanner is called to fill up one token buffer * *	However, once the tokens are filled up by the *	character scanner, they are used in both the first and the second *	pass.  Holes created by .stab removal are replaced *	with 'skip' tokens that direct the second pass to ignore the *	following tokens. */#define TOKBUFLG		4096#define MAXVAX			32		#define SAFETY			16#define AVAILTOKS		TOKBUFLG -\		sizeof(long) -\		sizeof (struct tokbufdesc *) -\		MAXVAX - SAFETYstruct tokbufdesc{	long		tok_count;		/*absolute byte length*/	struct		tokbufdesc *tok_next;	char		toks[AVAILTOKS];	char		bufovf[MAXVAX + SAFETY];};/* *	Definitions for handling tokens in the intermediate file *	buffers. * *	We want to have the compiler produce the efficient auto increment *	instruction for stepping through the buffer of tokens.  We must *	fool the type checker into thinking that a pointer can point *	to various size things. */typedef long inttoktype;typedef char bytetoktype;typedef char *ptrall;			/*all uses will be type cast*/typedef u_short lgtype;			/*for storing length of strings or skiping*//* *	defintions for putting various typed values *	into the intermediate buffers *	ptr will ALWAYS be of type ptrall */ #define align(ptr)	ptr = (char *) ((unsigned long)(ptr + 1) & 0xfffffffe)#define	pchar(ptr,val)		*ptr++  = val#define	puchar(ptr,val)		*ptr++  = val#define	pshort(ptr,val)		{ align(ptr) , (*(short *)ptr=val,	ptr += sizeof(short) ;} #define	plgtype(ptr,val)	{ align(ptr) , *(lgtype *)ptr=val,	ptr += sizeof(lgtype) ;}   #define	pushort(ptr,val)	{ align(ptr) , *(u_short *)ptr=val,	ptr += sizeof(short)  ;}  #define	pint(ptr,val)		{ align(ptr) , *(long *)ptr  = val,	ptr += sizeof(long)  ;}  #define	puint(ptr,val)		{ align(ptr) , *(u_int long *)ptr=val,	ptr += sizeof(long)  ;}  #define	plong(ptr,val)		{ align(ptr) , *(long *)ptr  = val,	ptr += sizeof(long)   ;} #define	pulong(ptr,val)		{ align(ptr) , *(u_int long *)ptr=val,	ptr += sizeof(long)  ;}  #define	pnumber(ptr,val)	{ align(ptr) , *(Bignum*)ptr=val,	ptr += sizeof(Bignum)   ;} #define	popcode(ptr,val)	{ align(ptr) , *(struct Opcode*)ptr=val,	ptr += sizeof(struct Opcode)  ;}  #define	pptr(ptr,val)		{ align(ptr), *(long *)ptr  = (val),	ptr += sizeof(ptrall) ;} #define	ptoken(ptr,val)		*ptr++  = val#define	pskiplg(ptr,val)	{ align(ptr), *(lgtype *)ptr  = val,	ptr += sizeof(short) ;} #define	gchar(val, ptr)		val = *ptr++#define	guchar(val, ptr)	val = *ptr++#define	gshort(val, ptr)	{ align(ptr), val = *(short *)ptr , ptr += sizeof (short) ;} #define	glgtype(val, ptr)	{ align(ptr), val = *(lgtype *)ptr , ptr += sizeof (lgtype) ;} #define	gushort(val, ptr)	{ align(ptr), val = *(u_short *)ptr , ptr += sizeof (short) ;} #define	gint(val, ptr)		{ align(ptr), val = *(long *)ptr, ptr += sizeof (long) ;} #define	guint(val, ptr)		{ align(ptr), val = *(u_int *)ptr, ptr += sizeof (long) ;} #define	glong(val, ptr)		{ align(ptr), val = *(long *)ptr, ptr += sizeof (long) ;} #define	gulong(val, ptr)	{ align(ptr), val = *(u_int *)ptr, ptr += sizeof (long) ;} #define	gnumber(val, ptr)	{ align(ptr), val = *(Bignum *)ptr, ptr += sizeof(Bignum) ;} #define	gopcode(val, ptr)	{ align(ptr), val = *(struct Opcode *)ptr, ptr += sizeof(struct Opcode) ;} #define	gptr(val, ptr)		{ align(ptr), val = *(long *)ptr, ptr += sizeof (ptrall) ;} #define	gtoken(val, ptr)	val = *ptr++#define	gskiplg(val, ptr)	{ align(ptr), val = *(lgtype *)ptr, ptr += sizeof (short) ;} extern	ptrall tokptr;	/*the next token to consume, call by copy*/extern	ptrall tokub;	/*current upper bound in the current buffer*//*Fuctions asscan1.c*/void inittokfile(void);void closetokfile(void);inttoktype yylex(void);void buildskip(	register	ptrall	from,	register	ptrall	to);void movestr(	char	*to,	/* 4(ap) */ 	char	*from,	/* 8(ap) */	long	lg			/* 12(ap) */);void new_dot_s(	char	*namep);long min(long a, long b);/*Fuctions asscan2.c*/void fillinbuffer(void);void scan_dot_s(	struct tokbufdesc *bufferbox);/*Functions asscan4.c*/long number(	reg	long	ch);Bignum *floatnumber(	Bignum  *a_big_number_p,	long	fltradix);long scanint(	long	signOK,	char	**dstcpp);#endif ASSCAN_H